# -*- coding:utf-8 -*-
# 2019-10-24 19:00
# 波士顿房价预测-线性回归（正规方程）

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.datasets import load_boston
from sklearn.externals import joblib
from sklearn.metrics import mean_squared_error
from sklearn.linear_model import SGDRegressor


def load_data():
    """
    产生（加载）波士顿房价数据并返回
    :return: 波士顿房价数据
    """
    data = load_boston()
    return data


def boston_predict_model_1(data):
    """
    波士顿房价预测-线性回归（正规方程）
    :param data: boston 房价数据
    :return: None
    """
    # 1. 加载数据
    # data = load_data()

    # 2. 数据集划分
    x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, random_state=22)

    # 3. 特征工程-标准化
    transfer = StandardScaler()
    x_train = transfer.fit_transform(x_train)
    x_test = transfer.transform(x_test)

    # 4. 机器学习-线性回归（正规方程）
    estimator = LinearRegression()

    # 4.1 模型保存
    joblib.dump(estimator, './data/boston_predict_model_1.pkl')
    # 4.2 模型加载
    # estimator = joblib.load('./data/boston_predict_model_1.pkl')
    # 4.3 模型训练
    estimator.fit(x_train, y_train)

    # 5. 模型评估
    # 5.1 获取模型系数
    y_predict = estimator.predict(x_test)
    print("预测值为:\n", y_predict)
    print("模型中的系数为:\n", estimator.coef_)
    print("模型中的偏置为:\n", estimator.intercept_)
    # 5.2 评价-均方误差
    error = mean_squared_error(y_test, y_predict)
    print("误差为:\n", error)


def boston_predict_model_2(data):
    """"
    波士顿房价预测-线性回归（梯度下降法）
    :param data: boston 房价数据
    :return: None
    """
    # 1. 加载数据
    # data = load_data()

    # 2. 数据集划分
    x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, random_state=22)

    # 3. 特征工程-标准化
    transfer = StandardScaler()
    x_train = transfer.fit_transform(x_train)
    x_test = transfer.transform(x_test)

    # 4. 机器学习-线性回归（特征方程）
    estimator = SGDRegressor(max_iter=1000)

    # 4.1 模型保存
    joblib.dump(estimator, './data/boston_predict_model_2.pkl')
    # 4.2 模型加载
    # estimator = joblib.load('./data/boston_predict_model_2.pkl')
    # 4.3 模型训练
    estimator.fit(x_train, y_train)

    # 5. 模型评估
    # 5.1 获取模型系数
    y_predict = estimator.predict(x_test)
    print("预测值为:\n", y_predict)
    print("模型中的系数为:\n", estimator.coef_)
    print("模型中的偏置为:\n", estimator.intercept_)
    # 5.2 评价-均方误差
    error = mean_squared_error(y_test, y_predict)
    print("误差为:\n", error)


def main():
    data = load_data()
    # boston_predict_model_1(data)
    boston_predict_model_2(data)


if __name__ == '__main__':
    main()
    # 正规方程预测结果：
    #     预测值为:
    #     [28.22944896 31.5122308  21.11612841 32.6663189  20.0023467  19.07315705
    #      21.09772798 19.61400153 19.61907059 32.87611987 20.97911561 27.52898011
    #      15.54701758 19.78630176 36.88641203 18.81202132  9.35912225 18.49452615
    #      30.66499315 24.30184448 19.08220837 34.11391208 29.81386585 17.51775647
    #      34.91026707 26.54967053 34.71035391 27.4268996  19.09095832 14.92742976
    #      30.86877936 15.88271775 37.17548808  7.72101675 16.24074861 17.19211608
    #      7.42140081 20.0098852  40.58481466 28.93190595 25.25404307 17.74970308
    #      38.76446932  6.87996052 21.80450956 25.29110265 20.427491   20.4698034
    #      17.25330064 26.12442519  8.48268143 27.50871869 30.58284841 16.56039764
    #      9.38919181 35.54434377 32.29801978 21.81298945 17.60263689 22.0804256
    #      23.49262401 24.10617033 20.1346492  38.5268066  24.58319594 19.78072415
    #      13.93429891  6.75507808 42.03759064 21.9215625  16.91352899 22.58327744
    #      40.76440704 21.3998946  36.89912238 27.19273661 20.97945544 20.37925063
    #      25.3536439  22.18729123 31.13342301 20.39451125 23.99224334 31.54729547
    #      26.74581308 20.90199941 29.08225233 21.98331503 26.29101202 20.17329401
    #      25.49225305 24.09171045 19.90739221 16.35154974 15.25184758 18.40766132
    #      24.83797801 16.61703662 20.89470344 26.70854061 20.7591883  17.88403312
    #      24.28656105 23.37651493 21.64202047 36.81476219 15.86570054 21.42338732
    #      32.81366203 33.74086414 20.61688336 26.88191023 22.65739323 17.35731771
    #      21.67699248 21.65034728 27.66728556 25.04691687 23.73976625 14.6649641
    #      15.17700342  3.81620663 29.18194848 20.68544417 22.32934783 28.01568563
    #      28.58237108]
    # 模型中的系数为:
    # [-0.64817766  1.14673408 - 0.05949444  0.74216553 - 1.95515269  2.70902585
    #  - 0.07737374 - 3.29889391  2.50267196 - 1.85679269 - 1.75044624  0.87341624
    #  - 3.91336869]
    # 模型中的偏置为:
    # 22.62137203166228
    # 误差为:
    # 20.6275137630954

    # 梯度下降法预测结果：
    # 预测值为:
    #  [28.25034933 31.55405189 21.41082419 32.64215954 20.1512419  19.20444065
    #  21.35703872 19.40512931 19.60448276 32.80731578 21.34813587 27.46448659
    #  15.69866522 19.97903312 36.89733013 18.76388697  9.61364075 18.61040759
    #  30.61750298 24.22293348 19.19662041 33.99272778 29.53351764 17.63283034
    #  34.73436012 26.53423267 34.29216884 27.24399695 19.29625208 15.46934935
    #  30.75478333 14.84489672 37.24849379  8.77612831 16.38164535 17.14245928
    #   7.93130422 19.9978084  40.33441346 28.9605953  25.20019845 17.94025748
    #  39.13485686  7.03234002 21.76972501 25.09322971 20.75318962 20.66284649
    #  17.1437046  26.3974353   9.61903455 27.15581198 30.56986036 16.87249604
    #   9.74800031 35.3977681  31.61779767 22.62712643 17.59960955 21.78013058
    #  23.61976271 23.99316507 20.26994101 38.10189279 25.39702304 19.86659743
    #  14.25162005  7.01490013 42.2265135  21.81979233 17.01452671 22.43653571
    #  40.7010955  21.59937427 36.77945763 27.14836831 21.48700143 20.75067324
    #  25.20158116 23.29998226 31.33638672 20.19784253 23.95380864 31.31947661
    #  27.14473468 21.00647419 29.0824653  21.83989369 26.63736205 19.11961154
    #  25.23319835 24.03920828 20.05031405 17.59554651 15.58154593 18.45397675
    #  24.61167619 16.88208452 20.89279776 26.73114536 20.89233316 18.09746807
    #  24.20587471 23.30555317 20.59732518 36.51981985 15.98948514 22.20554401
    #  32.58429697 33.84667347 20.5747673  26.19295513 23.07398201 17.6795314
    #  21.46004064 21.60040448 27.36675514 25.03883283 23.68388819 14.72762115
    #  15.74847091  4.03476497 29.19812795 20.78443905 22.28179669 27.97279838
    #  28.45835808]
    # 模型中的系数为:
    #  [-0.54823361  0.98172107 -0.34292234  0.77801224 -1.80499106  2.75632929
    #  -0.1090863  -3.22654493  1.8668379  -1.09014976 -1.71159701  0.85691876
    #  -3.88401105]
    # 模型中的偏置为:
    #  [22.63526498]
    # 误差为:
    #  21.23934505378699

